# Copyright 2024 Advanced Micro Devices, Inc.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: CI - sharktank

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit). The workflow name is prepended to avoid conflicts between
  # different workflows.
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  test:
    name: "Unit Tests and Type Checking"
    strategy:
      matrix:
        version: [3.11]
        os: [ubuntu-24.04, windows-2022]
      fail-fast: false
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: bash
    env:
      PIP_CACHE_DIR: "${{ github.workspace }}/.pip-cache"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{matrix.version}}

      - name: Cache Pip Packages
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        id: cache-pip
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: pip-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('*requirements*.txt','sharktank/requirements*.txt') }}

      - name: Install pip deps
        run: |
          python -m pip install --no-compile --upgrade pip
          # Note: We install in three steps in order to satisfy requirements
          # from non default locations first. Installing the PyTorch CPU
          # wheels saves multiple minutes and a lot of bandwidth on runner setup.
          pip install --no-compile -r pytorch-cpu-requirements.txt
          pip install --no-compile -r requirements.txt -r sharktank/requirements-tests.txt -e sharktank/

          # Install nightly IREE packages.
          # We could also pin to a known working or stable version.
          pip install -f https://iree.dev/pip-release-links.html --pre \
            iree-base-compiler \
            iree-base-runtime \
            iree-turbine

      - name: Run sharktank tests
        if: ${{ !cancelled() }}
        run: |
          pytest -n 4 sharktank/ --durations=10


  test_with_data:
    name: "Data-dependent Tests"
    strategy:
      matrix:
        version: [3.11]
        runs-on: [llama-mi300x-3]
      fail-fast: false
    runs-on: ${{matrix.runs-on}}
    defaults:
      run:
        shell: bash
    env:
      VENV_DIR: ${{ github.workspace }}/.venv
      HF_HOME: "/data/huggingface"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{matrix.version}}

      - name: Create Python venv
        run: python -m venv ${VENV_DIR}

      - name: Install sharktank deps
        run: |
          source ${VENV_DIR}/bin/activate
          python -m pip install --no-compile --upgrade pip
          # Note: We install in three steps in order to satisfy requirements
          # from non default locations first. Installing the PyTorch CPU
          # wheels saves multiple minutes and a lot of bandwidth on runner setup.
          pip install --no-compile -r pytorch-cpu-requirements.txt
          pip install --no-compile -r requirements.txt -r sharktank/requirements-tests.txt -e sharktank/

          # Install nightly IREE packages.
          # We could also pin to a known working or stable version.
          pip install -f https://iree.dev/pip-release-links.html --pre --upgrade \
            iree-base-compiler \
            iree-base-runtime \
            iree-turbine

      - name: Run tests
      # TODO: unify with-t5-data and with-clip-data flags into a single flag
      # and make it possible to run only tests that require data.
        run: |
          source ${VENV_DIR}/bin/activate
          pytest \
          --with-clip-data \
            --with-t5-data \
            sharktank/tests/models/clip/clip_test.py \
            sharktank/tests/models/t5/t5_test.py \
            --durations=0


  test_integration:
    name: "Model Integration Tests"
    runs-on: ubuntu-24.04
    env:
      PIP_CACHE_DIR: "${{ github.workspace }}/.pip-cache"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: 3.11

      - name: Cache Pip Packages
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        id: cache-pip
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: pip-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('*requirements*.txt','sharktank/requirements*.txt') }}

      - name: Install pip deps
        run: |
          python -m pip install --no-compile --upgrade pip
          # Note: We install in three steps in order to satisfy requirements
          # from non default locations first. Installing the PyTorch CPU
          # wheels saves multiple minutes and a lot of bandwidth on runner setup.
          pip install --no-compile -r pytorch-cpu-requirements.txt
          pip install --no-compile -r requirements.txt -r sharktank/requirements-tests.txt -e sharktank/

          # Install nightly IREE packages.
          # We could also pin to a known working or stable version.
          pip install -f https://iree.dev/pip-release-links.html --pre --upgrade \
            iree-base-compiler \
            iree-base-runtime \
            iree-turbine
      - name: Run punet tests
        run: |
          pytest -v sharktank/ -m punet_quick \
            --durations=0
